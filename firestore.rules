rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isAdmin() {
      return isAuthenticated() && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    function isValidComplaint() {
      return request.resource.data.keys().hasAll(['title', 'description', 'category', 'status', 'createdAt', 'userId']) &&
        request.resource.data.title is string &&
        request.resource.data.description is string &&
        request.resource.data.category in ['infrastructure', 'safety', 'environment', 'other'] &&
        request.resource.data.status in ['pending', 'in-progress', 'resolved', 'rejected'] &&
        request.resource.data.createdAt is timestamp &&
        request.resource.data.userId == request.auth.uid;
    }

    // Complaints collection
    match /complaints/{complaintId} {
      allow read: if true;  // Public can read complaints
      allow create: if isAuthenticated() && isValidComplaint();
      allow update: if isAuthenticated() && (
        isOwner(resource.data.userId) || 
        isAdmin()
      );
      allow delete: if isAdmin();
    }
    
    // Users collection
    match /users/{userId} {
      allow read: if isAuthenticated() && (isOwner(userId) || isAdmin());
      allow create: if isAuthenticated() && request.auth.uid == userId;
      allow update: if isAuthenticated() && (
        isOwner(userId) || 
        (isAdmin() && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['role', 'status']))
      );
      allow delete: if isAdmin();
    }
    
    // Admin settings
    match /settings/{settingId} {
      allow read: if true;
      allow write: if isAdmin();
    }
    
    // Default deny
    match /{document=**} {
      allow read, write: if false;
    }
  }
}